import re
import sqlite3
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
import requests
import aiohttp
import os

TOKEN_BOT = '6697800196:AAHCmTjokC_iE97W9grQYY3KAajgIHNs4rA'

bot = Bot(token=TOKEN_BOT)
dp = Dispatcher(bot)
logging_middleware = LoggingMiddleware()
dp.middleware.setup(logging_middleware)


admin_id = 1900666417


def download(url):
    request_url = f'https://api.douyin.wtf/api?url={url}'
    response = requests.get(request_url)
    if response.status_code == 200:
        data = response.json()
        video_url = data["video_data"]["wm_video_url_HQ"]
        return video_url
    else:
        return None

@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):

    await message.reply(
        '<b>–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ –Ω–∞–º –≤ –≤–∏–¥–µ–æ–±–æ—Ç TikTok! üéâ</b>\n\n–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å. –ü—Ä–æ—Å—Ç–æ –¥–∞–π—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å TikTok, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —ç—Ç–æ –≤–∏–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º! –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∑–∞–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å. üòäüìπ',
        parse_mode='html'
    )

@dp.message_handler()
async def process(message: types.Message):
    if re.compile('https://[a-zA-Z]+.tiktok.com/').match(message.text):
        loading = await message.reply('üïó –û–∂–∏–¥–∞–π—Ç–µ –≤–∏–¥–µ–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è...')
        video_url = download(message.text)

        if video_url:
            video_filename = await save_video_locally(video_url)

            if video_filename:
                with open(video_filename, 'rb') as video_file:
                    await bot.send_video(message.chat.id, video_file, caption='üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–µ–Ω–æ!')
                os.remove(video_filename)
            else:
                await message.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.')
        else:
            await message.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.')

        await bot.delete_message(message.chat.id, loading.message_id)
    else:
        await message.reply(
            '‚õîÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–∑ <b>TikTok</b>',
            parse_mode='html'
        )

async def save_video_locally(video_url):
    async with aiohttp.ClientSession() as session:
        async with session.get(video_url) as response:
            if response.status == 200:
                video_filename = 'downloaded_video.mp4'

                with open(video_filename, 'wb') as file:
                    while True:
                        chunk = await response.content.read(1024)
                        if not chunk:
                            break
                        file.write(chunk)

                return video_filename
            else:
                return None

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
